//
//  MockStorage.swift
//  FlashCa_SwiftUI
//
//  Created by Руслан Штыбаев on 19.11.2023.
//

import SwiftUI
import SwiftData

class MockStorage {
    @Environment(\.modelContext) private var modelContext
    
    private let data = [
        Deck(name: "First", createAt: Date(), about: "Description"),
        Deck(name: "Second", createAt: Date(), about: "Description"),
        Deck(name: "Third", createAt: Date(), about: "Description"),
        Deck(name: "Four", createAt: Date(), about: "Description"),
        Deck(name: "Five", createAt: Date(), about: "Description")
    ]
    
    
    private let cards = [
        Card(id: 1, term: "Абстракция", descript: "Концепция в программировании, которая скрывает сложную реальность, показывая только необходимые части."),
        Card(id: 2, term: "Инкапсуляция", descript: "Концепция в объектно-ориентированном программировании, которая связывает данные и функции, которые этими данными управляют, и защищает их от внешнего вмешательства и неправильного использования."),
        Card(id: 3, term: "Наследование", descript: "Механизм, при котором новый класс создается на основе существующего класса."),
        Card(id: 4, term: "Полиморфизм", descript: "Концепция в программировании, которая позволяет объектам разных классов обрабатываться как объекты общего суперкласса."),
        Card(id: 5, term: "Протокол", descript: "Набор методов и свойств, которые могут быть реализованы классами, структурами или перечислениями."),
        Card(id: 6, term: "Делегат", descript: "Шаблон проектирования, который позволяет одному объекту отправлять сообщения другому объекту при наступлении определенного события."),
        Card(id: 7, term: "Замыкание", descript: "Самодостаточные блоки функциональности, которые можно передавать и использовать в вашем коде."),
        Card(id: 8, term: "Кортеж", descript: "Группа из нескольких значений, объединенных в одно составное значение."),
        Card(id: 9, term: "Перечисление", descript: "Тип данных, который состоит из группы связанных значений и позволяет работать с ними безопасным для типов способом."),
        Card(id: 10, term: "Структура", descript: "Конструкция, определяющая тип данных, который группирует переменные под одним именем в блоке памяти."),
        Card(id: 11, term: "Класс", descript: "Шаблон для создания объектов, предоставляющий начальные значения для состояния и реализации поведения."),
        Card(id: 12, term: "Расширение", descript: "Функция, которая добавляет новую функциональность к существующему классу, структуре, перечислению или протоколу."),
        Card(id: 13, term: "Обобщение", descript: "Функция, которая позволяет писать гибкие и многократно используемые функции и типы, которые могут работать с любым типом, при соблюдении определенных требований."),
        Card(id: 14, term: "Опционал", descript: "Тип данных, представляющий либо обернутое значение, либо nil, что означает отсутствие значения."),
        Card(id: 15, term: "Словарь", descript: "Тип коллекции, который хранит ассоциации между ключами одного типа и значениями одного типа в неупорядоченной коллекции."),
        Card(id: 16, term: "Массив", descript: "Тип коллекции, который хранит значения одного типа в упорядоченном списке."),
        Card(id: 17, term: "Множество", descript: "Тип коллекции, который хранит уникальные значения одного типа в неупорядоченной коллекции."),
        Card(id: 18, term: "Охранное выражение", descript: "Оператор, который обеспечивает ранний выход из функции, если одно или несколько условий не выполнены."),
        Card(id: 19, term: "Отложенный", descript: "Оператор, который планирует выполнение блока кода позже, после выхода из текущей области видимости."),
        Card(id: 20, term: "Асинхронный", descript: "Ключевое слово, используемое для определения асинхронных функций, позволяющее выполнять код параллельно.")
    ]
    
    func createTempData(_ completion: @escaping() -> Void ) {
        data.forEach { deck in
            modelContext.insert(deck)
        }
    }
    
    func getCards() -> [Card] {
        return cards
    }
}
